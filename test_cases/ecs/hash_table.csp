package hash_table
struct type_impl
	var bucket_count=new number
	var table=new array
	var bucket_func=[](val)->math.abs(to_integer(runtime.hash(val)))%this.bucket_count
	function insert(dat)
		var bucket=bucket_func(dat.first)
		if table.at(bucket)==null
			table.at(bucket)=gcnew list
		end
		var lst=table.at(bucket)
		foreach it in *lst
			if it.first==dat.first
				it.second=dat.second
				return
			end
		end
		lst->push_back(dat)
	end
	function get(key)
		var bucket=bucket_func(key)
		var lst=table.at(bucket)
		if lst==null
			return null
		end
		foreach it in *lst
			if it.first==key
				return it.second
			end
		end
		return null
	end
	function print()
		foreach lst in table
			if lst!=null
				foreach p in *lst
					system.out.println(to_string(p.first)+":"+to_string(p.second))
				end
			end
		end
	end
end
function create(bc)
	var ht=gcnew type_impl
	ht->bucket_count=bc
	for i=1,i<=bc,++i
		ht->table.push_back(null)
	end
	return ht
end
